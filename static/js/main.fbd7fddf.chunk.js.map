{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","class","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAaeA,EAXF,SAACC,GACd,OACC,yBAAKC,UAAU,4DACd,yBAAKA,UAAU,MAAMC,IAAI,SAASC,IAAG,oDAA+CH,EAAMI,GAArD,UACrC,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCWEC,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,yBAAKC,MAAM,gBACTD,EAAOE,KAAI,SAACC,EAAMC,GAClB,OACA,kBAAC,EAAD,CACAC,IAAMD,EACNR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,aCCNQ,EAXG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACrB,OACC,yBAAKd,UAAU,OACf,2BACAA,UAAU,aACVe,KAAK,SAASC,YAAY,kBAC1BC,SAAUH,MCEII,EARA,SAACnB,GAChB,OACA,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,aAAc,gBAAiB,IAAK,WAAc,OAAQ,cAAiB,MAAOC,OAAQ,UACnIvB,EAAMwB,WC4COC,G,kBA1Cd,aAAgB,IAAD,8BACd,+CAcDC,eAAiB,SAACC,GAClB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAQ,CACZxB,OAAQ,GACRqB,YAAa,IAJA,E,iFAQI,IAAD,OAClBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEpB,OAAQ6B,S,+BAQ9B,IAAD,OACFC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAChD,OAAOA,EAAOH,KAAKoC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEjE,OAAgC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OACb,uCAIP,6BACC,yBAAK1C,UAAU,UACd,yBAAKA,UAAU,SAAf,0BACA,kBAAC,EAAD,CAAWc,aAAcwB,KAAKb,kBAE/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GAnCLM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.fbd7fddf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\nreturn (\r\n\t<div className='card tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img className='br3' alt='robots' src={`https://randomuser.me/api/portraits/women/${props.id}.jpg`} />\r\n\t\t<div>\r\n\t\t\t<h3>{props.name}</h3>\r\n\t\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => { \r\n\treturn (\r\n\t\t<div class='card-section'>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\tkey ={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t/>\r\n\t\t);\r\n\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\nreturn (\r\n\t<div className='pa3'>\r\n\t<input \r\n\tclassName='search-box'\r\n\ttype='search' placeholder='search contacts' \r\n\tonChange={searchChange}\r\n\t/>\r\n\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n<div style={{ overflowY: 'scroll', border: '1px dotted', 'border-bottom': '0', 'paddingTop': '20px', 'paddingBottom': '0px', height: '500px' }}>\r\n\t{props.children}\r\n</div>\r\n\t)\r\n}; \r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor () {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [ ],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n}\t\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots: users }));\r\n\t}\r\n\r\n\r\n\tonSearchChange = (event) => {\r\n\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\t\r\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t})\r\n\t\tif(this.state.robots.length === 0) {\r\n\t\t\treturn <h1>Loading</h1>\r\n\r\n\t\t} else {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='header'>\r\n\t\t\t\t\t<div className='title'>Friends Contact Search</div>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\t\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}